%%%-------------------------------------------------------------------
%%% @author badu
%%% @copyright (C) 2015, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 06. Oct 2015 7:09 AM
%%%-------------------------------------------------------------------
-module(even_fib_numbers).
-author("badu").
-include("../include/headers.hrl").

%% API
-export([run_tests/0]).

%https://projecteuler.net/problem=2

%Each new term in the Fibonacci sequence is generated by adding the previous two terms.
%% By starting with 1 and 2, the first 10 terms will be:

%1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

%By considering the terms in the Fibonacci sequence whose values do not exceed four million,
%% find the sum of the even-valued terms.

%%
%  1. generate next term in sequence, starting 1,2
%% 2. check if sum of list is greater than max (4M), if yes go to step 4
%% 3. add next term to list, go to step 1
%% 4. find sum of even numbers, return sum


sum(L)->
  Total = lists:foldr(fun(X, Sum)-> X+ Sum end,
    0,
    L),
  Total.
sum_even_terms(L)->
  Total = lists:foldr(fun(X, Sum)-> X+ Sum end,
    0,
    lists:filter(fun(X)-> X rem 2 == 0 end, L)),
  Total.

generate_next_sequence(L, Max) when is_list(L), length(L)>1, is_integer(Max) ->
  LastTerm = lists:nth(length(L)-1,L) + lists:nth(length(L), L),
  Sum = sum(L),
  case Sum < Max of
    true->
      NewL = L ++ [LastTerm],
      generate_next_sequence(NewL, Max);
    _ ->
      ?PRINT ("~p~n",[L]),
      sum_even_terms(L)
  end.



sum_of_even_valued_terms_in_fib_seq(Max)->
  S=generate_next_sequence([1, 2], Max),
  ?PRINT("Sum: ~p~n",[S]).

run_tests()->
  sum_of_even_valued_terms_in_fib_seq(100),
  ok.

